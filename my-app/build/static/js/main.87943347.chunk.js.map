{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","initial_todo","key","defaultValue","content","tags","isCompleted","undefined","stored","localStorage","getItem","todo_txt","stored_value","JSON","parse","value","this_object","startsWith","slice","splitted","split","map","v","trim","shift","length","join","push","this_string","setItem","stringify","useState","todos","setTodos","CreateTodo","newTodos","className","onSubmit","event","preventDefault","new_content","target","todo_item","new_tags","todo_tag","current_string","autoComplete","type","name","placeholder","src","logo","alt","todo","i","onClick","index","temporaryTodos","cs","toggleTodoCompleteAtIndex","onChange","a","updateTodoAtIndex","console","log","c","t","n","replace","updateTodoTagAtIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87943347.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  const key = 'my_todo_tasks';\n\n  const defaultValue = [\n    {\n      content: 'Complete Assignment 2',\n      tags: 'grading,ischool',\n      isCompleted: false,\n    },\n    {\n      content: 'Complete Lab 3',\n      tags: undefined,\n      isCompleted: false,\n    }\n  ];\n\n  const stored = localStorage.getItem(key);\n\n  var todo_txt = [];\n  var initial_todo;\n\n  if (stored) {\n    const stored_value = JSON.parse(stored);\n\n    initial_todo = [];\n\n    for (var value of stored_value) {\n      var this_object = {};\n\n      if (value.startsWith(\"x \")) {\n        this_object.isCompleted = true;\n\n        value = value.slice(2);\n      }\n\n      var splitted = value.split('@').map(v => v.trim());\n\n      this_object.content = splitted.shift();\n\n      if (splitted.length > 0) {\n        var tags = splitted.join();\n        this_object.tags = tags;\n      }\n\n      initial_todo.push(this_object);\n    }\n\n  } else {\n    initial_todo = defaultValue;\n\n    for (var v of initial_todo) {\n      var this_string = '';\n      if (v.isCompleted) {\n        this_string += 'x ';\n      }\n\n      this_string += v.content;\n\n      if (v.tags) {\n        const tags = v.tags.split(',');\n        for (var tag of tags) {\n          this_string = this_string + ' @' + tag;\n        }\n      }\n      todo_txt.push(this_string.trim());\n    }\n\n    localStorage.setItem(key, JSON.stringify(todo_txt));\n  };\n\n\n  const [todos, setTodos] = useState(initial_todo);\n\n  function CreateTodo() {\n    const newTodos = [...todos];\n\n    const handleSubmit = (event) => {\n      event.preventDefault();\n\n      const new_content = event.target.todo_item.value;\n      const new_tags = event.target.todo_tag.value;\n\n      if (new_content !== \"\") {\n        newTodos.push({\n          content: new_content,\n          tags: new_tags,\n          isCompleted: false,\n        }); // submitting an empty form will have no actual effect\n        setTodos(newTodos)\n\n        var current_string = JSON.parse(localStorage.getItem(key));\n\n        var this_string = '';\n\n        this_string += new_content;\n        this_string += ' ';\n\n        if (new_tags) {\n          const tags = new_tags.split(',');\n          for (var tag of tags) {\n            this_string = this_string + '@' + tag + ' ';\n          }\n        }\n        current_string.push(this_string.trim());\n\n        localStorage.setItem(key, JSON.stringify(current_string));\n      }\n    };\n\n    return (\n      <div className=\"todo-container\">\n        <form onSubmit={handleSubmit} className=\"todo-form\" autoComplete=\"off\">\n          <input className=\"td-input\" type=\"text\" name=\"todo_item\" placeholder=\"I need to...\" />\n          <br />\n          <input className=\"td-input\" type=\"text\" name=\"todo_tag\" placeholder=\"tag1,tag2...(Optional)\" />\n          <button type=\"submit\" className=\"custom-button\">Add</button>\n        </form>\n      </div>\n    );\n  }\n\n  function updateTodoAtIndex(event, index) {\n    const temporaryTodos = [...todos];\n    temporaryTodos[index].content = event.target.value;\n    setTodos(temporaryTodos);\n\n    var current_string = JSON.parse(localStorage.getItem(key));\n    var a = current_string[index];\n    a = a.split('@');\n    a[0] = temporaryTodos[index].content;\n\n    for (var i = 1; i < a.length; i++) {\n      a[i] = '@' + a[i];\n      a[i] = a[i].trim();\n    }\n\n    a = a.join(' ');\n\n    if (temporaryTodos[index].isCompleted) {\n      a = 'x ' + a;\n    }\n\n    current_string[index] = a;\n    localStorage.setItem(key, JSON.stringify(current_string));\n  }\n\n  function updateTodoTagAtIndex(event, index) {\n    const temporaryTodos = [...todos];\n    temporaryTodos[index].tags = event.target.value;\n    console.log(temporaryTodos[index]);\n    setTodos(temporaryTodos);\n\n    var current_string = JSON.parse(localStorage.getItem(key));\n    var a = current_string[index];\n    a = a.split('@');\n    var c = a.shift(); // this is todo content\n    var t = ''; // this is new tag content\n\n    let tags = temporaryTodos[index].tags.split(',');\n    for (var tag of tags) {\n      t = t + \" @\" + tag;\n    }\n\n    var n = c + t;\n\n    if (temporaryTodos[index].tags === \"\") {\n      n = c;\n    } // if all tags are removed, delete trailing @\n\n    n = n.replace(/\\s\\s/g, ' '); // remove excessive white space \n\n    current_string[index] = n;\n    localStorage.setItem(key, JSON.stringify(current_string));\n  }\n\n\n  function toggleTodoCompleteAtIndex(index) {\n    const temporaryTodos = [...todos];\n    temporaryTodos[index].isCompleted = !temporaryTodos[index].isCompleted;\n    setTodos(temporaryTodos);\n\n    if (temporaryTodos[index].isCompleted) {\n      var current_string = JSON.parse(localStorage.getItem(key));\n      current_string[index] = \"x \" + current_string[index];\n      localStorage.setItem(key, JSON.stringify(current_string));\n    } else {\n      var cs = JSON.parse(localStorage.getItem(key));\n      cs[index] = cs[index].slice(2);\n      localStorage.setItem(key, JSON.stringify(cs));\n    } // handles un-complete\n\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n      </div>\n      <CreateTodo />\n      <div className=\"todo-container\">\n        <form className=\"todo-form\" autoComplete=\"off\">\n          <ul>\n            {todos.map((todo, i) => (\n              <div key={todo.content + '_' + todo.tags} className={`todo ${todo.isCompleted && 'todo-is-completed'}`}>\n                <div className={'checkbox'} onClick={() => toggleTodoCompleteAtIndex(i)}>\n                  {todo.isCompleted && (\n                    <span>&#x2714;</span>\n                  )}\n                </div>\n                <input\n                  type=\"text\"\n                  className=\"display-input\"\n                  value={todo.content}\n                  onChange={event => updateTodoAtIndex(event, i)}\n                />\n                <br />\n                <input\n                  type=\"text\"\n                  className=\"display-input\"\n                  value={todo.tags}\n                  onChange={event => updateTodoTagAtIndex(event, i)}\n                />\n              </div>\n            ))}\n          </ul>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}